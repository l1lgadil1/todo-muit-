Laboratory Work Requirements:

1-2. Introduction to ReactJS:
- Create a basic React application
- Create basic To-Do List structure (title, task list, add task button) WITHOUT FUNCTIONALITY 
- Use CSS for basic styling (e.g., task cards, buttons)

3. React Application Structure:
- Organize project into separate components
- Implement task display with static task list
- Use props for data transfer between components

4. Functional Components & Hooks:
- Use useState for dynamic task state management
- Set up task data loading from localStorage on initial render
- Implement useEffect for side effects

5. Class Components & Lifecycle:
- Create class components for Pomodoro Timer
- Add lifecycle methods for timer initialization
- Implement "Work/Rest" status switching

6. Styling:
- Set up styling using CSS Modules or Styled-components
- Ensure minimalistic and intuitive design
- Implement theme switching (light/dark)

7. Events & Forms:
- Implement task CRUD operations
- Create controlled components for task forms
- Save updated task list to localStorage
- Add task filtering and search by name
- Handle events (e.g., toggle task status "In Progress"/"Completed")

Additional Features:
- Drag and drop task reordering
- Task management (add, complete, delete)
- Task filtering (completion status, date)
- Clear completed tasks
- Persistent storage
- SASS Modules for styling
- Feature-Sliced Design Architecture
- Smooth animations and transitions
- Modern UI/UX design
- Authentication
- Always use variables everywhere (colors, fonts, constants, etc.)
- Always separate logic and UI
- Use cebab case for naming components, variables, functions, etc.
- use FSD architecture